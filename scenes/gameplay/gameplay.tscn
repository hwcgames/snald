[gd_scene load_steps=13 format=2]

[ext_resource path="res://addons/qodot/src/nodes/qodot_map.gd" type="Script" id=1]
[ext_resource path="res://fgd.tres" type="Resource" id=2]
[ext_resource path="res://scenes/gameplay/gameplay.gd" type="Script" id=3]
[ext_resource path="res://textures/ps1-post.tres" type="Material" id=4]
[ext_resource path="res://music/night_ambience.ogg" type="AudioStream" id=5]
[ext_resource path="res://eggs/egg-phone.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/disable_unless_flag.tscn" type="PackedScene" id=7]

[sub_resource type="SpatialMaterial" id=1]

[sub_resource type="Environment" id=2]
background_energy = 0.0
ambient_light_energy = 0.0
ambient_light_sky_contribution = 0.0
fog_enabled = true
fog_color = Color( 0, 0, 0, 1 )
fog_sun_color = Color( 0, 0, 0, 1 )
fog_depth_begin = 0.0
fog_depth_end = 30.0
glow_bloom = 1.0

[sub_resource type="QuadMesh" id=3]
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode unshaded, shadows_disabled, depth_test_disable, depth_draw_never;

uniform int color_depth : hint_range(1, 8) = 5;
uniform bool dithering = true;
uniform int resolution_scale = 4;

int dithering_pattern(ivec2 fragcoord) {
	const int pattern[] = {
		-4, +0, -3, +1, 
		+2, -2, +3, -1, 
		-3, +1, -4, +0, 
		+3, -1, +2, -2
	};
	
	int x = fragcoord.x % 4;
	int y = fragcoord.y % 4;
	
	return pattern[y * 4 + x];
}

void vertex() {
	POSITION = vec4(VERTEX, 1.0);
}

void fragment() {
	ivec2 uv = ivec2(FRAGCOORD.xy / float(resolution_scale));
	vec3 color = texelFetch(SCREEN_TEXTURE, uv * resolution_scale, 0).rgb;
	
	// Convert from [0.0, 1.0] range to [0, 255] range
	ivec3 c = ivec3(round(color * 255.0));
	
	// Apply the dithering pattern
	if (dithering) {
		c += ivec3(dithering_pattern(uv));
	}
	
	// Truncate from 8 bits to color_depth bits
	c >>= (8 - color_depth);

	// Convert back to [0.0, 1.0] range
	ALBEDO = vec3(c) / float(1 << color_depth);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/color_depth = 6
shader_param/dithering = true
shader_param/resolution_scale = 1

[node name="gameplay" type="Spatial"]
script = ExtResource( 3 )

[node name="QodotMap" type="Spatial" parent="."]
script = ExtResource( 1 )
map_file = ""
inverse_scale_factor = 16.0
entity_fgd = ExtResource( 2 )
base_texture_dir = "res://textures"
texture_file_extensions = PoolStringArray( "png" )
worldspawn_layers = [  ]
brush_clip_texture = "special/clip"
face_skip_texture = "special/skip"
texture_wads = [  ]
material_file_extension = "material"
default_material = SubResource( 1 )
uv_unwrap_texel_size = 1.0
print_profiling_data = false
use_trenchbroom_group_hierarchy = false
tree_attach_batch_size = 16
set_owner_batch_size = 16

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="."]
layers = 2
material_override = ExtResource( 4 )
extra_cull_margin = 16384.0
mesh = SubResource( 3 )
material/0 = null

[node name="DisableUnlessFlag" parent="MeshInstance" instance=ExtResource( 7 )]
flag_to_check = "post-process"
default = true

[node name="MeshInstance2" type="MeshInstance" parent="."]
layers = 4
material_override = SubResource( 5 )
extra_cull_margin = 16384.0
mesh = SubResource( 3 )
material/0 = null

[node name="DisableUnlessFlag" parent="MeshInstance2" instance=ExtResource( 7 )]
flag_to_check = "post-process"
default = true

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )

[node name="MusicStarter" type="Timer" parent="."]
wait_time = 20.0
one_shot = true
autostart = true

[node name="CompletionTimer" type="Timer" parent="."]
one_shot = true

[node name="Node" parent="." instance=ExtResource( 6 )]

[connection signal="build_complete" from="QodotMap" to="." method="completed_build"]
[connection signal="timeout" from="MusicStarter" to="AudioStreamPlayer" method="play"]
